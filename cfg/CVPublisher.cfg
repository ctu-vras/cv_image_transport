#!/usr/bin/env python

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

PACKAGE='cv_image_transport'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

format_enum = gen.enum([
    gen.const("format_jpeg", str_t, "jpeg", "JPEG format"),
    gen.const("format_png", str_t, "png", "PNG format"),
    gen.const("format_tif", str_t, "tif", "TIFF format"),
    gen.const("format_bmp", str_t, "bmp", "BMP format"),
    gen.const("format_dib", str_t, "dib", "DIB format"),
    gen.const("format_jp2", str_t, "jp2", "JPEG2000 format"),
    gen.const("format_jxl", str_t, "jxl", "JPEG XL format"),
    gen.const("format_pbm", str_t, "pbm", "PBM format (binary)"),
    gen.const("format_pgm", str_t, "pgm", "PGM format (grayscale)"),
    gen.const("format_ppm", str_t, "ppm", "PPM format"),
    gen.const("format_pxm", str_t, "pxm", "PXM format"),
    gen.const("format_pnm", str_t, "pnm", "PNM format"),
    gen.const("format_pam", str_t, "pam", "PAM format"),
    gen.const("format_sr", str_t, "sr", "SR format"),
    gen.const("format_ras", str_t, "ras", "RAS format"),
    gen.const("format_gif", str_t, "gif", "GIF format"),
    gen.const("format_webp", str_t, "webp", "WebP format"),
    gen.const("format_avif", str_t, "avif", "AVIF format"),
    gen.const("format_exr", str_t, "exr", "EXR format (OpenEXR)"),
    gen.const("format_hdr", str_t, "hdr", "HDR format (Radiance HDR)"),
    gen.const("format_pic", str_t, "pic", "PIC format (Radiance HDR)"),
], "Enum to set the compression format" )
gen.add("format", str_t, 0, "Compression format", "jpeg", edit_method = format_enum)
gen.add("enable", bool_t, 0, "enable", True)

# JPEG

gen.add("jpeg_quality", int_t, 0, "JPEG quality percentile", 80, 1, 100)
gen.add("jpeg_progressive", bool_t, 0, "JPEG progressive?", False)
gen.add("jpeg_optimize", bool_t, 0, "JPEG optimize?", False)
gen.add("jpeg_rst_interval", int_t, 0, "JPEG restart interval", 0, 0, 65535)
gen.add("jpeg_luma_quality", int_t, 0, "JPEG luma quality", -1, -1, 100)
gen.add("jpeg_chroma_quality", int_t, 0, "JPEG chroma quality", -1, -1, 100)
jpeg_sampling_factor_enum = gen.enum([
    gen.const("jpeg_sampling_4_1_1", int_t, 0x411111, "4x1,1x1,1x1"),
    gen.const("jpeg_sampling_4_2_0", int_t, 0x221111, "2x2,1x1,1x1"),
    gen.const("jpeg_sampling_4_2_2", int_t, 0x211111, "2x1,1x1,1x1"),
    gen.const("jpeg_sampling_4_4_0", int_t, 0x121111, "1x2,1x1,1x1"),
    gen.const("jpeg_sampling_4_4_4", int_t, 0x111111, "1x1,1x1,1x1(No subsampling)"),
], "Enum to set the JPEG sampling factor" )
gen.add("jpeg_sampling_factor", int_t, 0, "JPEG sampling factor", 0x221111, edit_method = jpeg_sampling_factor_enum)

# PNG

gen.add("png_level", int_t, 0, "PNG compression level", 1, 0, 9)
png_strategy_enum = gen.enum([
    gen.const("png_strategy_default", int_t, 0, "DEFAULT"),
    gen.const("png_strategy_filtered", int_t, 1, "FILTERED"),
    gen.const("png_strategy_huffmann_only", int_t, 2, "huffmann_ONLY"),
    gen.const("png_strategy_rle", int_t, 3, "RLE"),
    gen.const("png_strategy_fixed", int_t, 4, "FIXED"),
], "Enum to set the JPEG sampling factor" )
gen.add("png_strategy", int_t, 0, "PNG strategy", 0, edit_method = png_strategy_enum)
gen.add("png_bilevel", bool_t, 0, "Binary level PNG?", False)
png_filter_enum = gen.enum([
    gen.const("png_filter_none", int_t, 8, "NONE"),
    gen.const("png_filter_sub", int_t, 16, "SUB"),
    gen.const("png_filter_up", int_t, 32, "UP"),
    gen.const("png_filter_avg", int_t, 64, "AVG"),
    gen.const("png_filter_paeth", int_t, 128, "PAETH"),
    gen.const("png_filter_fast", int_t, 8 + 16 + 32, "FAST"),
    gen.const("png_filter_all", int_t, 255, "ALL"),
], "Enum to set the JPEG sampling factor" )
gen.add("png_filter", int_t, 0, "PNG filter", 16, edit_method = png_filter_enum)
gen.add("png_zlib_buffer_size", int_t, 0, "PNG ZLib buffer size", 0, 0, 2147483647)

# PXM

gen.add("pxm_binary", bool_t, 0, "Store PXM files in binary format?", True)

# EXR

exr_type_enum = gen.enum([
    gen.const("exr_type_half", int_t, 1, "HALF"),
    gen.const("exr_type_float", int_t, 2, "FLOAT"),
], "EXR type" )
gen.add("exr_type", int_t, 0, "EXR type", 2, edit_method = exr_type_enum)
exr_compression_enum = gen.enum([
    gen.const("exr_compression_no", int_t, 0, "no"),
    gen.const("exr_compression_rle", int_t, 1, "rle"),
    gen.const("exr_compression_zips", int_t, 2, "zips"),
    gen.const("exr_compression_zip", int_t, 3, "zip"),
    gen.const("exr_compression_piz", int_t, 4, "piz"),
    gen.const("exr_compression_pxr24", int_t, 5, "pxr24"),
    gen.const("exr_compression_b44", int_t, 6, "b44"),
    gen.const("exr_compression_b44a", int_t, 7, "b44a"),
    gen.const("exr_compression_dwaa", int_t, 8, "dwaa"),
    gen.const("exr_compression_dwab", int_t, 9, "dwab"),
], "EXR compression" )
gen.add("exr_compression", int_t, 0, "EXR compression", 3, edit_method = exr_compression_enum)
gen.add("exr_dwa_compression_level", int_t, 0, "EXR DWA compression level", 45, 0, 100)

# WebP

gen.add("webp_quality", int_t, 0, "WebP quality (>100 is lossless)", 101, 1, 101)

# HDR

hdr_compression_enum = gen.enum([
    gen.const("hdr_compression_none", int_t, 0, "NONE"),
    gen.const("hdr_compression_rle", int_t, 1, "RLE"),
], "HDR compression" )
gen.add("hdr_compression", int_t, 0, "HDR compression", 1, edit_method = hdr_compression_enum)

# PAM

pam_tupletype_enum = gen.enum([
    gen.const("pam_tupletype_null", int_t, 0, "NULL"),
    gen.const("pam_tupletype_blackandwhite", int_t, 1, "BLACKANDWHITE"),
    gen.const("pam_tupletype_grayscale", int_t, 1, "GRAYSCALE"),
    gen.const("pam_tupletype_grayscale_alpha", int_t, 1, "GRAYSCALE_ALPHA"),
    gen.const("pam_tupletype_rgb", int_t, 1, "RGB"),
    gen.const("pam_tupletype_rgb_alpha", int_t, 1, "RGB_ALPHA"),
], "PAM TUPLETYPE" )
gen.add("pam_tupletype", int_t, 0, "PAM TUPLETYPE", 0, edit_method = pam_tupletype_enum)

# TIFF

tiff_resunit_enum = gen.enum([
    gen.const("tiff_resunit_none", int_t, 1, "NONE"),
    gen.const("tiff_resunit_inch", int_t, 2, "INCH"),
    gen.const("tiff_resunit_centimeter", int_t, 3, "CENTIMETER"),
], "TIFF RESUNIT" )
gen.add("tiff_resunit", int_t, 0, "TIFF RESUNIT", 1, edit_method = tiff_resunit_enum)
gen.add("tiff_xdpi", int_t, 0, "TIFF X DPI", 0, 0, 2147483647)
gen.add("tiff_ydpi", int_t, 0, "TIFF Y DPI", 0, 0, 2147483647)
tiff_compression_enum = gen.enum([
    gen.const("tiff_compression_none", int_t, 1, "NONE"),
    gen.const("tiff_compression_ccittrle", int_t, 2, "CCITTRLE"),
    gen.const("tiff_compression_ccittfax3", int_t, 3, "CCITTFAX3"),
    gen.const("tiff_compression_ccitt_t4", int_t, 3, "CCITT_T4"),
    gen.const("tiff_compression_ccittfax4", int_t, 4, "CCITTFAX4"),
    gen.const("tiff_compression_ccitt_t6", int_t, 4, "CCITT_T6"),
    gen.const("tiff_compression_lzw", int_t, 5, "LZW"),
    gen.const("tiff_compression_ojpeg", int_t, 6, "OJPEG"),
    gen.const("tiff_compression_jpeg", int_t, 7, "JPEG"),
    gen.const("tiff_compression_t85", int_t, 9, "T85"),
    gen.const("tiff_compression_t43", int_t, 10, "T43"),
    gen.const("tiff_compression_next", int_t, 32766, "NEXT"),
    gen.const("tiff_compression_ccittrlew", int_t, 32771, "CCITTRLEW"),
    gen.const("tiff_compression_packbits", int_t, 32773, "PACKBITS"),
    gen.const("tiff_compression_thunderscan", int_t, 32809, "THUNDERSCAN"),
    gen.const("tiff_compression_it8ctpad", int_t, 32895, "IT8CTPAD"),
    gen.const("tiff_compression_it8lw", int_t, 32896, "IT8LW"),
    gen.const("tiff_compression_it8mp", int_t, 32897, "IT8MP"),
    gen.const("tiff_compression_it8bl", int_t, 32898, "IT8BL"),
    gen.const("tiff_compression_pixarfilm", int_t, 32908, "PIXARFILM"),
    gen.const("tiff_compression_pixarlog", int_t, 32909, "PIXARLOG"),
    gen.const("tiff_compression_deflate", int_t, 32946, "DEFLATE"),
    gen.const("tiff_compression_adobe_deflate", int_t, 8, "ADOBE_DEFLATE"),
    gen.const("tiff_compression_dcs", int_t, 32947, "DCS"),
    gen.const("tiff_compression_jbig", int_t, 34661, "JBIG"),
    gen.const("tiff_compression_sgilog", int_t, 34676, "SGILOG"),
    gen.const("tiff_compression_sgilog24", int_t, 34677, "SGILOG24"),
    gen.const("tiff_compression_jp2000", int_t, 34712, "JP2000"),
    gen.const("tiff_compression_lerc", int_t, 34887, "LERC"),
    gen.const("tiff_compression_lzma", int_t, 34925, "LZMA"),
    gen.const("tiff_compression_zstd", int_t, 50000, "ZSTD"),
    gen.const("tiff_compression_webp", int_t, 50001, "WEBP"),
    gen.const("tiff_compression_jxl", int_t, 50002, "JXL"),
], "TIFF COMPRESSION" )
gen.add("tiff_compression", int_t, 0, "TIFF COMPRESSION", 1, edit_method = tiff_compression_enum)
gen.add("tiff_rows_per_strip", int_t, 0, "TIFF ROWSPERSTRIP", 0, 0, 2147483647)
tiff_predictor_enum = gen.enum([
    gen.const("tiff_predictor_none", int_t, 1, "NONE"),
    gen.const("tiff_predictor_horizontal", int_t, 2, "HORIZONTAL"),
    gen.const("tiff_predictor_floatingpoint", int_t, 3, "FLOATINGPOINT"),
], "TIFF PREDICTOR" )
gen.add("tiff_predictor", int_t, 0, "TIFF PREDICTOR", 1, edit_method = tiff_predictor_enum)

# JPEG2000

gen.add("jpeg2000_compression_x1000", int_t, 0, "JPEG2000 compression times 1000", 1000, 0, 1000)

# AVIF

gen.add("avif_quality", int_t, 0, "AVIF QUALITY", 95, 0, 100)
avif_depth_enum = gen.enum([
    gen.const("avif_depth_8_bit", int_t, 8, "8-BIT"),
    gen.const("avif_depth_10_bit", int_t, 10, "10-BIT"),
    gen.const("avif_depth_12_bit", int_t, 12, "12-BIT"),
], "AVIF DEPTH" )
gen.add("avif_depth", int_t, 0, "AVIF DEPTH", 8, edit_method = avif_depth_enum)
gen.add("avif_speed", int_t, 0, "AVIF SPEED", 9, 0, 9)

# JPEG XL

gen.add("jpegxl_quality", int_t, 0, "JPEG XL QUALITY", 95, 0, 100)
gen.add("jpegxl_effort", int_t, 0, "JPEG XL EFFORT", 7, 1, 10)
gen.add("jpegxl_distance", int_t, 0, "JPEG XL DISTANCE", 1, 0, 25)
gen.add("jpegxl_decoding_speed", int_t, 0, "JPEG XL DECODING SPEED", 0, 0, 4)

# GIF

gif_quality_enum = gen.enum([
    gen.const("gif_quality_fast_no_dither", int_t, 1, "FAST NO DITHER"),
    gen.const("gif_quality_fast_floyd_dither", int_t, 2, "FAST FLOYD DITHER"),
    gen.const("gif_quality_colortable_size_8", int_t, 3, "COLOTABLE SIZE 8"),
    gen.const("gif_quality_colortable_size_16", int_t, 4, "COLOTABLE SIZE 16"),
    gen.const("gif_quality_colortable_size_32", int_t, 5, "COLOTABLE SIZE 32"),
    gen.const("gif_quality_colortable_size_64", int_t, 6, "COLOTABLE SIZE 64"),
    gen.const("gif_quality_colortable_size_128", int_t, 7, "COLOTABLE SIZE 128"),
    gen.const("gif_quality_colortable_size_256", int_t, 8, "COLOTABLE SIZE 256"),
], "GIF QUALITY" )
gen.add("gif_quality", int_t, 0, "GIF QUALITY", 2, edit_method = gif_quality_enum)
gen.add("gif_dither", int_t, 0, "GIF DITHER", 0, -1, 3)
gen.add("gif_transparency", int_t, 0, "GIF TRANSPARENCY", 1, 0, 255)
gif_colortable_enum = gen.enum([
    gen.const("gif_colortable_global", int_t, 0, "GLOBAL"),
    gen.const("gif_colortable_local", int_t, 1, "LOCAL"),
], "GIF COLORTABLE" )
gen.add("gif_colortable", int_t, 0, "GIF COLORTABLE", 0, edit_method = gif_colortable_enum)

exit(gen.generate(PACKAGE, "CVPublisher", "CVPublisher"))